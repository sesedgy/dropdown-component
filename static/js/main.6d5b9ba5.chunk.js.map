{"version":3,"sources":["components/DropdownMenu/index.js","App.js","serviceWorker.js","index.js"],"names":["DropdownMenu","state","menuOpen","newValue","this","props","onChange","setState","_this2","_this$props","value","options","react_default","a","createElement","Fragment","dist_default","ref","select","ReactDOM","findDOMNode","className","box","label","onClick","concat","Object","toConsumableArray","react_material_icon_dist_default","style","display","changeValue","icon","react_menu_surface_dist_default","anchorCorner","Corner","BOTTOM_LEFT","anchorElement","onClose","open","quickOpen","react_list_dist_default","map","option","react_list_dist","key","primaryText","PureComponent","App","padding","components_DropdownMenu","Component","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4VAyEeA,4OAzDXC,MAAQ,CACJC,UAAU,8EAGFC,GACRC,KAAKC,MAAMC,SAASH,GACpBC,KAAKG,SAAS,CAACL,UAAU,qCAGpB,IAAAM,EAAAJ,KACEF,EAAYE,KAAKH,MAAjBC,SADFO,EAEgCL,KAAKC,MAAlCK,EAFHD,EAEGC,MAAOC,EAFVF,EAEUE,QAFVF,EAEmBH,SAExB,OACIM,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACAH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACII,IAAK,SAACA,GAAST,EAAKU,OAASC,IAASC,YAAYH,IAClDI,UAAWX,EAAQ,aAAe,GAClCY,KAAK,EACLZ,MAAOA,GAAgB,GACvBa,MAAM,aACNC,QAAS,kBAAMhB,EAAKD,SAAS,CAACL,UAAWA,KACzCS,QAAO,CACH,CACIY,MAAO,GACPb,MAAO,OAHRe,OAAAC,OAAAC,EAAA,EAAAD,CAKAf,MAGXC,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACIQ,UAAU,4BACVQ,MAAO,CACHC,QAASpB,EAAQ,QAAU,QAE/Bc,QAAS,kBAAMhB,EAAKuB,YAAY,OAChCC,KAAK,WACTpB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CACIqB,aAAcC,SAAOC,YACrBC,cAAejC,KAAKc,OACpBoB,QAAS,kBAAM9B,EAAKD,SAAS,CAACL,UAAU,KACxCqC,KAAMrC,EACNsC,WAAW,GAEX5B,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CAAMQ,UAAU,sBACXV,EAAQ+B,IAAI,SAAAC,GACT,OAAQ/B,EAAAC,EAAAC,cAAC8B,EAAA,SAAD,CAAUvB,UAAW,+BAAgCG,QAAS,kBAAMhB,EAAKuB,YAAYY,EAAOjC,QAAQmC,IAAKF,EAAOjC,OACpHE,EAAAC,EAAAC,cAAC8B,EAAA,aAAD,CAAcE,YAAaH,EAAOpB,qBAhDnCwB,kBCqBZC,oNA7BX/C,MAAQ,CAACS,MAAO,8EAEP,IAAAF,EAAAJ,KACEM,EAASN,KAAKH,MAAdS,MAEP,OACIE,EAAAC,EAAAC,cAAA,OAAKe,MAAO,CAACoB,QAAS,SAClBrC,EAAAC,EAAAC,cAACoC,EAAD,CACIxC,MAAOA,EACPJ,SAAU,SAACI,GAAWF,EAAKD,SAAS,CAACG,MAAOA,KAC5CC,QAAS,CACL,CACIY,MAAO,UACPb,MAAO,WAEX,CACIa,MAAO,UACPb,MAAO,WAEX,CACIa,MAAO,UACPb,MAAO,sBAtBjByC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNrC,IAASsC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6d5b9ba5.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Select from '@material/react-select';\r\nimport MenuSurface, {Corner} from '@material/react-menu-surface';\r\nimport List, {ListItem, ListItemText} from '@material/react-list';\r\nimport MaterialIcon from '@material/react-material-icon';\r\n\r\nimport '@material/react-select/dist/select.css';\r\nimport '@material/react-menu-surface/dist/menu-surface.css';\r\nimport '@material/react-list/dist/list.css';\r\nimport '@material/react-material-icon/dist/material-icon.css';\r\nimport './styles.css'\r\n\r\n\r\n\r\nclass DropdownMenu extends PureComponent {\r\n    state = {\r\n        menuOpen: false\r\n    };\r\n\r\n    changeValue(newValue) {\r\n        this.props.onChange(newValue);\r\n        this.setState({menuOpen: false});\r\n    }\r\n\r\n    render() {\r\n        const {menuOpen} = this.state;\r\n        const { value, options, onChange } = this.props;\r\n\r\n        return (\r\n            <>\r\n            <Select\r\n                ref={(ref) => {this.select = ReactDOM.findDOMNode(ref)}}\r\n                className={value ? 'delete-btn' : ''}\r\n                box={false}\r\n                value={value ? value : ''}\r\n                label='Choose one'\r\n                onClick={() => this.setState({menuOpen: !menuOpen})}\r\n                options={[\r\n                    {\r\n                        label: '',\r\n                        value: null\r\n                    },\r\n                    ...options\r\n                    ]}\r\n            />\r\n            <MaterialIcon\r\n                className=\"dropdown-menu_cancel-icon\"\r\n                style={{\r\n                    display: value ? 'unset' : 'none',\r\n                }}\r\n                onClick={() => this.changeValue(null)}\r\n                icon='cancel' />\r\n            <MenuSurface\r\n                anchorCorner={Corner.BOTTOM_LEFT}\r\n                anchorElement={this.select}\r\n                onClose={() => this.setState({menuOpen: false})}\r\n                open={menuOpen}\r\n                quickOpen={true}\r\n            >\r\n                <List className=\"dropdown-menu_menu\">\r\n                    {options.map(option => {\r\n                        return (<ListItem className={'dropdown-menu_menu_list-item'} onClick={() => this.changeValue(option.value)} key={option.value}>\r\n                            <ListItemText primaryText={option.label}/>\r\n                        </ListItem>)\r\n                    })}\r\n                </List>\r\n            </MenuSurface>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DropdownMenu;\r\n","import React, { Component } from 'react';\r\nimport DropdownMenu from './components/DropdownMenu'\r\n\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n    state = {value: null};\r\n\r\n    render() {\r\n        const {value} = this.state;\r\n\r\n        return (\r\n            <div style={{padding: '40px'}}>\r\n                <DropdownMenu\r\n                    value={value}\r\n                    onChange={(value) => {this.setState({value: value})}}\r\n                    options={[\r\n                        {\r\n                            label: 'Label 1',\r\n                            value: 'Value 1'\r\n                        },\r\n                        {\r\n                            label: 'Label 2',\r\n                            value: 'Value 2'\r\n                        },\r\n                        {\r\n                            label: 'Label 3',\r\n                            value: 'Value 3'\r\n                        }\r\n                    ]}\r\n                />\r\n            </div>);\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}